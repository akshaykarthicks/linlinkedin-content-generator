
"use client";

import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { generateLinkedInContent, type GenerateLinkedInContentInput } from '@/ai/flows/generate-linkedin-content';
import { useToast } from "@/hooks/use-toast";
import { Loader2, Linkedin, Sparkles, Copy } from "lucide-react";

// Schema for form validation
const formSchema = z.object({
  userInput: z.string().min(10, { message: "Please enter at least 10 characters for your content idea." }),
});

export default function HomePage() {
  const [isClient, setIsClient] = useState(false);
  const [generatedContent, setGeneratedContent] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    setIsClient(true);
  }, []);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      userInput: "",
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    setGeneratedContent(null); // Clear previous content
    let contentSuccessfullyRetrieved = false;

    // Attempt 1: Fetch content from n8n webhook
    try {
      const n8nResponse = await fetch('YOUR_WEBHOOK_URL', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ input_text: values.userInput }),
      });

      if (n8nResponse.ok) {
        const n8nData = await n8nResponse.json();
        if (n8nData && typeof n8nData.Content === 'string' && n8nData.Content.trim() !== '') {
          setGeneratedContent(n8nData.Content);
          toast({
            title: "Content Processed!",
            description: "Content successfully retrieved from the webhook.",
          });
          contentSuccessfullyRetrieved = true;
        } else {
          console.warn("Webhook response OK, but 'Content' field missing, not a string, or empty:", n8nData);
          toast({
            title: "Webhook Update",
            description: "Webhook responded, but usable content was not found. Falling back to AI generation.",
            variant: "default",
          });
        }
      } else {
        console.error("n8n webhook error:", n8nResponse.status, n8nResponse.statusText);
        toast({
          title: "Webhook Error",
          description: `n8n webhook failed (${n8nResponse.status}). Falling back to AI generation.`,
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error("Error fetching from n8n:", error);
      toast({
        title: "Webhook Connection Error",
        description: "Failed to connect to the n8n webhook. Falling back to AI generation.",
        variant: "destructive",
      });
    }

    // Attempt 2: Generate content using AI, if not retrieved from webhook
    if (!contentSuccessfullyRetrieved) {
      try {
        const aiInput: GenerateLinkedInContentInput = { topic: values.userInput };
        const aiResponse = await generateLinkedInContent(aiInput);
        if (aiResponse && aiResponse.linkedInPost) {
          setGeneratedContent(aiResponse.linkedInPost);
          toast({
            title: "Content Generated by AI!",
            description: "Your LinkedIn post has been successfully generated by AI.",
          });
          contentSuccessfullyRetrieved = true;
        } else {
          console.error("AI did not return valid content:", aiResponse);
          throw new Error("AI response was invalid or missing the post.");
        }
      } catch (error) {
        console.error("Error generating content with AI:", error);
        toast({
          title: "AI Generation Failed",
          description: error instanceof Error ? error.message : "An unknown error occurred during AI content generation.",
          variant: "destructive",
        });
      }
    }
    
    if (!contentSuccessfullyRetrieved) {
        setGeneratedContent("Sorry, we couldn't generate content at this time. Please try again later.");
    }

    setIsLoading(false);
  }

  const handleCopy = () => {
    if (generatedContent) {
      navigator.clipboard.writeText(generatedContent)
        .then(() => {
          toast({ title: "Copied!", description: "Content copied to clipboard." });
        })
        .catch(() => {
          toast({ title: "Copy Failed", description: "Could not copy content. Please try again.", variant: "destructive" });
        });
    }
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen p-6 sm:p-8 md:p-10">
      <Card className="w-full max-w-3xl shadow-xl rounded-lg">
        <CardHeader className="text-center p-6">
          <div className="flex items-center justify-center mb-4">
            {isClient && <Linkedin className="w-10 h-10 sm:w-12 sm:h-12 text-primary mr-3" />}
            <CardTitle className="text-3xl sm:text-4xl md:text-4xl font-headline">LinkedUp Content Generator</CardTitle>
          </div>
          <CardDescription className="text-base sm:text-lg text-muted-foreground px-4">
            Enter your base idea, and let us craft an engaging LinkedIn post for you!
          </CardDescription>
        </CardHeader>
        <CardContent className="p-6">
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
              <FormField
                control={form.control}
                name="userInput"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-lg sm:text-xl font-medium">Your Content Idea</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="e.g., The future of remote work and its impact on team collaboration..."
                        className="min-h-[140px] sm:min-h-[160px] resize-y text-base p-4 rounded-md focus:ring-primary focus:border-primary"
                        {...field}
                        disabled={isLoading}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button type="submit" className="w-full text-lg sm:text-xl py-3.5 sm:py-4 rounded-md" disabled={isLoading || !isClient}>
                {isLoading ? (
                  <>
                    {isClient && <Loader2 className="mr-2 h-5 w-5 animate-spin" />}
                    Generating...
                  </>
                ) : (
                  <>
                    {isClient && <Sparkles className="mr-2 h-5 w-5" />}
                    Generate Content
                  </>
                )}
              </Button>
            </form>
          </Form>
        </CardContent>

        {generatedContent && !isLoading && (
          <CardFooter className="flex flex-col items-start space-y-4 border-t p-6">
            <div className="flex justify-between items-center w-full">
                <h3 className="text-xl sm:text-2xl font-headline text-primary">Generated LinkedIn Post:</h3>
                <Button variant="outline" size="sm" onClick={handleCopy} className="rounded-md text-sm" disabled={!isClient}>
                    {isClient && <Copy className="mr-2 h-4 w-4" />}
                    Copy
                </Button>
            </div>
            <div className="w-full p-6 bg-muted rounded-md whitespace-pre-wrap text-base leading-relaxed text-foreground">
              {generatedContent}
            </div>
          </CardFooter>
        )}
      </Card>
    </div>
  );
}
